import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;

public class Linear {

	public static void main(String[] args) {
		PrintWriter pw = null;
		int n = 0;
		long start_time = System.currentTimeMillis();
		try {
			pw = new PrintWriter("LinearTetranacci.txt");
		} catch (FileNotFoundException e) {
			System.out.println("File could not be created for LinearTetranacci. Error : " + e);
		}

		for (int i = 0; i < 201; i++)

		{
			long result = tetranacci(n);
			System.out.println("Linear_Tetranacci(" + i + ") = " + result);

			String s = "Linear_Tetranacci(" + i + ") = " + result;
			pw.println(s);

			long endtime = System.currentTimeMillis();
			long executiontime = endtime - start_time;
			System.out.print("Execution Time: " + executiontime + "ms");
			System.out.println();
			String exe = "Execution Time: " + executiontime + "ms";
			pw.println(exe);
			pw.flush();

			n++;

		}

	}

	public static long tetranacci(int n) {
		if (n == 0 || n == 1 || n == 2) {
			return 0;
		} else if (n == 3) {
			return 1;
		} else {
			long[] tetranacci = new long[n + 1];
			tetranacci[0] = tetranacci[1] = tetranacci[2] = 0;
			tetranacci[3] = 1;

			for (int i = 4; i <= n; i++) {
				tetranacci[i] = tetranacci[i - 1] + tetranacci[i - 2] + tetranacci[i - 3] + tetranacci[i - 4];
			}

			return tetranacci[n];
		}

	}

}

//Pseudo Code
//1. Initialize PrintWriter pw to null
//2. Initialize n to 0
//3. Record start_time as the current system time
//4. Try to create a PrintWriter with "LinearTetranacci.txt"
//   a. If successful, proceed to step 5
//   b. If an exception (FileNotFoundException) occurs, print an error message
//5. Loop i from 0 to 200:
//   a. Calculate the tetranacci number for n and store it in result
//   b. Print "Linear_Tetranacci(" followed by i and ") = " followed by result
//   c. Create a string s with the same message
//   d. Write string s to the PrintWriter pw
//   e. Record endtime as the current system time
//   f. Calculate executiontime as endtime - start_time
//   g. Print "Execution Time: " followed by executiontime and "ms"
//   h. Create a string exe with the same message
//   i. Write string exe to the PrintWriter pw
//   j. Flush the PrintWriter pw
//   k. Increment n by 1
//6. Close the PrintWriter pw
//7. End of program
//
//Function tetranacci(n):
//1. If n is 0, 1, or 2, return 0
//2. If n is 3, return 1
//3. Otherwise, create an array tetranacci of size n+1
//4. Set tetranacci[0], tetranacci[1], and tetranacci[2] to 0
//5. Set tetranacci[3] to 1
//6. Loop from 4 to n:
//   a. Calculate tetranacci[i] as tetranacci[i-1] + tetranacci[i-2] + tetranacci[i-3] + tetranacci[i-4]
//7. Return tetranacci[n]




