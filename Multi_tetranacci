import java.util.Scanner;
import java.io.*;

public class multi_tetranacci {
	public static void main(String[] args) {
		int terms = 5;
		PrintWriter pw = null;

		System.out.println("Multi_tetranacci calculator");
		long start_time = System.currentTimeMillis();

		try {
			pw = new PrintWriter("MultiTetranacci.txt");
		} catch (FileNotFoundException e) {
			System.out.println("File could not be created for MultiTetranacci. Error : " + e);
		}

		int i = 0;
		while (i <= 200) {
			long result = tetranacci(terms);
			System.out.println("term :- " + terms + " output = " + result);
			String s = "term :- " + terms + " output = " + result;
			pw.println(s);
			terms += 5;

			long endtime = System.currentTimeMillis();
			long executiontime = endtime - start_time;
			System.out.print("Execution Time: " + executiontime + "ms");
			System.out.println();
			String exe = "Execution Time: " + executiontime + "ms";
			pw.println(exe);
			pw.flush();
			i += 5;
		}

		pw.close();

	}

	public static int tetranacci(int n) {

		if (n == 0 || n == 1 || n == 2) {
			return 0;
		} else if (n == 3) {
			return 1;
		} else {
			return tetranacci(n - 1) + tetranacci(n - 2) + tetranacci(n - 3) + tetranacci(n - 4);
		}

	}
}


//Pseudo Code
//1. Initialize terms to 5
//2. Initialize PrintWriter pw to null
//3. Print "Multi_tetranacci calculator"
//4. Record start_time as the current system time
//5. Try to create a PrintWriter with "MultiTetranacci.txt"
//   a. If successful, proceed to step 6
//   b. If an exception (FileNotFoundException) occurs, print an error message
//6. Initialize i to 0
//7. While i is less than or equal to 200, do the following:
//   a. Calculate the tetranacci number for the current terms and store it in result
//   b. Print "term :- " followed by terms and " output = " followed by result
//   c. Create a string s with the same message
//   d. Write string s to the PrintWriter pw
//   e. Increment terms by 5
//   f. Record endtime as the current system time
//   g. Calculate executiontime as endtime - start_time
//   h. Print "Execution Time: " followed by executiontime and "ms"
//   i. Create a string exe with the same message
//   j. Write string exe to the PrintWriter pw
//   k. Flush the PrintWriter pw
//   l. Increment i by 5
//8. Close the PrintWriter pw
//9. End of program
//
//Function tetranacci(n):
//1. If n is 0, 1, or 2, return 0
//2. If n is 3, return 1
//3. Otherwise, return the sum of tetranacci(n-1), tetranacci(n-2), tetranacci(n-3), and tetranacci(n-4)
